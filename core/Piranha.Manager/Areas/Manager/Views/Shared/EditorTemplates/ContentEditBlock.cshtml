@model Piranha.Areas.Manager.Models.ContentEditBlock
@{
    Layout = null;
    bool isInGroup = ViewBag.IsInGroup != null ? ViewBag.IsInGroup : false;
    var blockType = Piranha.App.Blocks.GetByType(Model.CLRType);
    Piranha.Runtime.AppBlock groupType = blockType;

    if (ViewBag.GroupType != null)
    {
        groupType = ViewBag.GroupType;
    }
}
<div class="sortable-item">
    <div class="block @(Model.IsGroup ? "block-group" : "")">
        <div class="block-actions">
            @if (!Model.IsGroup)
            {
                <i class="@blockType.Icon pull-left block-icon"></i>
                <span class="pull-left block-name">@blockType.Name</span>
            }
            else 
            {
                <button class="btn btn-secondary btn-sm block-expand"><span class="fas fa-angle-down"></span></button>
            }
            <div class="btn btn-secondary btn-sm sortable-handle"><span class="fas fa-ellipsis-v"></span></div>
            <button class="btn btn-secondary btn-sm block-remove"><span class="fas fa-trash"></span></button>
        </div>
        @Html.HiddenFor(m => m.Id)
        @Html.HiddenFor(m => m.CLRType)
        @Html.HiddenFor(m => m.IsReusable)
        @Html.HiddenFor(m => m.Value.Id)
        @if (Model.IsGroup)
        {
            <div class="block-group-heading @(!blockType.UseCustomView ? "default" : "")">
                <i class="far fa-newspaper group-icon"></i>
                <h3 class="group-title">@blockType.Name</h3>
                @if (blockType.UseCustomView) {
                    @Html.EditorFor(m => m.Value, Model.Value.GetType().Name)
                }
            </div>
            <div class="block-group-info block-info">
                <p>Expand the group to add or edit the items</p>
            </div>
            <div class="block-group-body">
                <div class="unsortable">
                    <div class="block-add block-add-above">
                        <div class="block-add-dialog">
                            @foreach (var category in Piranha.App.Blocks.GetCategories()) {
                                var items = Piranha.App.Blocks.GetByCategory(category, includeGroups: false);

                                if (blockType.ItemTypes.Count > 0) {
                                    items = items.Where(i => blockType.ItemTypes.Contains(i.Type));
                                }
                                items = items.Where(i => !i.IsUnlisted || blockType.ItemTypes.Contains(i.Type));

                                if (items.Count() > 0) {
                                    <label>@category</label>
                                    @foreach (var block in items) {
                                        <a href="#" data-typename="@block.TypeName" data-includegroups="false" data-grouptype="@blockType.TypeName"><i class="@block.Icon"></i>@block.Name</a>
                                    }
                                }
                            }
                        </div>
                        <a href="#" class="block-add-toggle">
                            <hr><span class="fas fa-plus"></span>
                        </a>
                    </div>
                </div>
                @for (var n = 0; n < Model.Items.Count(); n++)
                {
                    @Html.EditorFor(m => m.Items[n], "ContentEditBlock", new { IsInGroup = true, GroupType = blockType }) 
                }
            </div>
        } else {
            @Html.EditorFor(m => m.Value, Model.Value.GetType().Name)
        }
    </div>
    <div class="block-add block-add-above">
        <div class="block-add-dialog">
            @foreach (var category in Piranha.App.Blocks.GetCategories()) {
                var items = Piranha.App.Blocks.GetByCategory(category, includeGroups: !isInGroup);

                if (isInGroup && groupType.ItemTypes.Count > 0) {
                    items = items.Where(i => groupType.ItemTypes.Contains(i.Type));
                }
                items = items.Where(i => !i.IsUnlisted || (isInGroup && groupType.ItemTypes.Contains(i.Type)));

                if (items.Count() > 0) {
                    <label>@category</label>
                    @foreach (var block in items) {
                        <a href="#" data-typename="@block.TypeName" data-includegroups="@(!isInGroup)" data-grouptype="@(isInGroup ? groupType.TypeName : "")"><i class="@block.Icon"></i>@block.Name</a>
                    }
                }
            }
        </div>
        <a href="#" class="block-add-toggle">
            <hr><span class="fas fa-plus"></span>
        </a>
    </div>
</div>
